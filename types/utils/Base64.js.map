{"version":3,"sources":["../../src/utils/Base64.ts"],"sourcesContent":["/**\n * UTF16和UTF8转换对照表\n * U+00000000 – U+0000007F \t0xxxxxxx\n * U+00000080 – U+000007FF \t110xxxxx 10xxxxxx\n * U+00000800 – U+0000FFFF \t1110xxxx 10xxxxxx 10xxxxxx\n * U+00010000 – U+001FFFFF \t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n * U+00200000 – U+03FFFFFF \t111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n * U+04000000 – U+7FFFFFFF \t1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n */\n\n// 转码表\nconst tables = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"+\",\n  \"/\",\n];\n\nexport const convertUtf16ToUtf8 = (str: string) => {\n  let results = [],\n    len = str.length;\n  for (let i = 0; i < len; i++) {\n    let code = str.charCodeAt(i);\n    if (code > 0x0000 && code <= 0x007f) {\n      /* 一字节，不考虑0x0000，因为是空字节\n                 U+00000000 – U+0000007F \t0xxxxxxx\n              */\n      results.push(str.charAt(i));\n    } else if (code >= 0x0080 && code <= 0x07ff) {\n      /* 二字节\n                 U+00000080 – U+000007FF \t110xxxxx 10xxxxxx\n                 110xxxxx\n              */\n      let byte1 = 0xc0 | ((code >> 6) & 0x1f);\n      // 10xxxxxx\n      let byte2 = 0x80 | (code & 0x3f);\n      results.push(String.fromCharCode(byte1), String.fromCharCode(byte2));\n    } else if (code >= 0x0800 && code <= 0xffff) {\n      /* 三字节\n                 U+00000800 – U+0000FFFF \t1110xxxx 10xxxxxx 10xxxxxx\n                 1110xxxx\n              */\n      let byte1 = 0xe0 | ((code >> 12) & 0x0f);\n      // 10xxxxxx\n      let byte2 = 0x80 | ((code >> 6) & 0x3f);\n      // 10xxxxxx\n      let byte3 = 0x80 | (code & 0x3f);\n      results.push(\n        String.fromCharCode(byte1),\n        String.fromCharCode(byte2),\n        String.fromCharCode(byte3)\n      );\n    } else if (code >= 0x00010000 && code <= 0x001fffff) {\n      // 四字节\n      // U+00010000 – U+001FFFFF \t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n    } else if (code >= 0x00200000 && code <= 0x03ffffff) {\n      // 五字节\n      // U+00200000 – U+03FFFFFF \t111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n    } /** if (code >= 0x04000000 && code <= 0x7FFFFFFF)*/ else {\n      // 六字节\n      // U+04000000 – U+7FFFFFFF \t1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n    }\n  }\n\n  return results.join(\"\");\n};\n\nexport const convertUtf8ToUtf16 = (str: string) => {\n  let results = [],\n    len = str.length;\n  let i = 0;\n  for (let i = 0; i < len; i++) {\n    let code = str.charCodeAt(i);\n    // 第一字节判断\n    if (((code >> 7) & 0xff) == 0x0) {\n      // 一字节\n      // 0xxxxxxx\n      results.push(str.charAt(i));\n    } else if (((code >> 5) & 0xff) == 0x6) {\n      // 二字节\n      // 110xxxxx 10xxxxxx\n      let code2 = str.charCodeAt(++i);\n      let byte1 = (code & 0x1f) << 6;\n      let byte2 = code2 & 0x3f;\n      let utf16 = byte1 | byte2;\n      results.push(String.fromCharCode(utf16));\n    } else if (((code >> 4) & 0xff) == 0xe) {\n      // 三字节\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      let code2 = str.charCodeAt(++i);\n      let code3 = str.charCodeAt(++i);\n      let byte1 = (code << 4) | ((code2 >> 2) & 0x0f);\n      let byte2 = ((code2 & 0x03) << 6) | (code3 & 0x3f);\n      let utf16 = ((byte1 & 0x00ff) << 8) | byte2;\n      results.push(String.fromCharCode(utf16));\n    } else if (((code >> 3) & 0xff) == 0x1e) {\n      // 四字节\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n    } else if (((code >> 2) & 0xff) == 0x3e) {\n      // 五字节\n      // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n    } /** if (((code >> 1) & 0xFF) == 0x7E)*/ else {\n      // 六字节\n      // 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n    }\n  }\n\n  return results.join(\"\");\n};\n\nexport const encode = (str: string) => {\n  if (!str) {\n    return \"\";\n  }\n  let utf8 = convertUtf16ToUtf8(str); // 转成UTF-8\n  let i = 0; // 遍历索引\n  let len = utf8.length;\n  let results = [];\n  while (i < len) {\n    let c1 = utf8.charCodeAt(i++) & 0xff;\n    results.push(tables[c1 >> 2]);\n    // 补2个=\n    if (i == len) {\n      results.push(tables[(c1 & 0x3) << 4]);\n      results.push(\"==\");\n      break;\n    }\n    let c2 = utf8.charCodeAt(i++);\n    // 补1个=\n    if (i == len) {\n      results.push(tables[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0f)]);\n      results.push(tables[(c2 & 0x0f) << 2]);\n      results.push(\"=\");\n      break;\n    }\n    let c3 = utf8.charCodeAt(i++);\n    results.push(tables[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0f)]);\n    results.push(tables[((c2 & 0x0f) << 2) | ((c3 & 0xc0) >> 6)]);\n    results.push(tables[c3 & 0x3f]);\n  }\n\n  return results.join(\"\");\n};\n\nexport const decode = (str: string) => {\n  //判断是否为空\n  if (!str) {\n    return \"\";\n  }\n\n  let len = str.length;\n  let i = 0;\n  let results = [];\n  //循环解出字符数组\n  while (i < len) {\n    let code1 = tables.indexOf(str.charAt(i++));\n    let code2 = tables.indexOf(str.charAt(i++));\n    let code3 = tables.indexOf(str.charAt(i++));\n    let code4 = tables.indexOf(str.charAt(i++));\n\n    let c1 = (code1 << 2) | (code2 >> 4);\n    results.push(String.fromCharCode(c1));\n\n    if (code3 != -1) {\n      let c2 = ((code2 & 0xf) << 4) | (code3 >> 2);\n      results.push(String.fromCharCode(c2));\n    }\n    if (code4 != -1) {\n      let c3 = ((code3 & 0x3) << 6) | code4;\n      results.push(String.fromCharCode(c3));\n    }\n  }\n\n  return convertUtf8ToUtf16(results.join(\"\"));\n};\n\nexport default {\n  convertUtf16ToUtf8,\n  convertUtf8ToUtf16,\n  encode,\n  decode,\n};\n"],"mappings":";AAWA,IAAM,SAAS;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEO,IAAM,qBAAqB,CAAC,QAAgB;AACjD,MAAI,UAAU,CAAC,GACb,MAAM,IAAI;AACZ,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,QAAI,OAAO,IAAI,WAAW,CAAC;AAC3B,QAAI,OAAO,KAAU,QAAQ,KAAQ;AAInC,cAAQ,KAAK,IAAI,OAAO,CAAC,CAAC;AAAA,IAC5B,WAAW,QAAQ,OAAU,QAAQ,MAAQ;AAK3C,UAAI,QAAQ,MAAS,QAAQ,IAAK;AAElC,UAAI,QAAQ,MAAQ,OAAO;AAC3B,cAAQ,KAAK,OAAO,aAAa,KAAK,GAAG,OAAO,aAAa,KAAK,CAAC;AAAA,IACrE,WAAW,QAAQ,QAAU,QAAQ,OAAQ;AAK3C,UAAI,QAAQ,MAAS,QAAQ,KAAM;AAEnC,UAAI,QAAQ,MAAS,QAAQ,IAAK;AAElC,UAAI,QAAQ,MAAQ,OAAO;AAC3B,cAAQ;AAAA,QACN,OAAO,aAAa,KAAK;AAAA,QACzB,OAAO,aAAa,KAAK;AAAA,QACzB,OAAO,aAAa,KAAK;AAAA,MAC3B;AAAA,IACF,WAAW,QAAQ,SAAc,QAAQ,SAAY;AAAA,IAGrD,WAAW,QAAQ,WAAc,QAAQ,UAAY;AAAA,IAGrD,OAA2D;AAAA,IAG3D;AAAA,EACF;AAEA,SAAO,QAAQ,KAAK,EAAE;AACxB;AAEO,IAAM,qBAAqB,CAAC,QAAgB;AACjD,MAAI,UAAU,CAAC,GACb,MAAM,IAAI;AACZ,MAAI,IAAI;AACR,WAASA,KAAI,GAAGA,KAAI,KAAKA,MAAK;AAC5B,QAAI,OAAO,IAAI,WAAWA,EAAC;AAE3B,SAAM,QAAQ,IAAK,QAAS,GAAK;AAG/B,cAAQ,KAAK,IAAI,OAAOA,EAAC,CAAC;AAAA,IAC5B,YAAa,QAAQ,IAAK,QAAS,GAAK;AAGtC,UAAI,QAAQ,IAAI,WAAW,EAAEA,EAAC;AAC9B,UAAI,SAAS,OAAO,OAAS;AAC7B,UAAI,QAAQ,QAAQ;AACpB,UAAI,QAAQ,QAAQ;AACpB,cAAQ,KAAK,OAAO,aAAa,KAAK,CAAC;AAAA,IACzC,YAAa,QAAQ,IAAK,QAAS,IAAK;AAGtC,UAAI,QAAQ,IAAI,WAAW,EAAEA,EAAC;AAC9B,UAAI,QAAQ,IAAI,WAAW,EAAEA,EAAC;AAC9B,UAAI,QAAS,QAAQ,IAAO,SAAS,IAAK;AAC1C,UAAI,SAAU,QAAQ,MAAS,IAAM,QAAQ;AAC7C,UAAI,SAAU,QAAQ,QAAW,IAAK;AACtC,cAAQ,KAAK,OAAO,aAAa,KAAK,CAAC;AAAA,IACzC,YAAa,QAAQ,IAAK,QAAS,IAAM;AAAA,IAGzC,YAAa,QAAQ,IAAK,QAAS,IAAM;AAAA,IAGzC,OAA+C;AAAA,IAG/C;AAAA,EACF;AAEA,SAAO,QAAQ,KAAK,EAAE;AACxB;AAEO,IAAM,SAAS,CAAC,QAAgB;AACrC,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AACA,MAAI,OAAO,mBAAmB,GAAG;AACjC,MAAI,IAAI;AACR,MAAI,MAAM,KAAK;AACf,MAAI,UAAU,CAAC;AACf,SAAO,IAAI,KAAK;AACd,QAAI,KAAK,KAAK,WAAW,GAAG,IAAI;AAChC,YAAQ,KAAK,OAAO,MAAM,CAAC,CAAC;AAE5B,QAAI,KAAK,KAAK;AACZ,cAAQ,KAAK,QAAQ,KAAK,MAAQ,CAAC,CAAC;AACpC,cAAQ,KAAK,IAAI;AACjB;AAAA,IACF;AACA,QAAI,KAAK,KAAK,WAAW,GAAG;AAE5B,QAAI,KAAK,KAAK;AACZ,cAAQ,KAAK,QAAS,KAAK,MAAQ,IAAO,MAAM,IAAK,EAAK,CAAC;AAC3D,cAAQ,KAAK,QAAQ,KAAK,OAAS,CAAC,CAAC;AACrC,cAAQ,KAAK,GAAG;AAChB;AAAA,IACF;AACA,QAAI,KAAK,KAAK,WAAW,GAAG;AAC5B,YAAQ,KAAK,QAAS,KAAK,MAAQ,IAAO,MAAM,IAAK,EAAK,CAAC;AAC3D,YAAQ,KAAK,QAAS,KAAK,OAAS,KAAO,KAAK,QAAS,CAAE,CAAC;AAC5D,YAAQ,KAAK,OAAO,KAAK,EAAI,CAAC;AAAA,EAChC;AAEA,SAAO,QAAQ,KAAK,EAAE;AACxB;AAEO,IAAM,SAAS,CAAC,QAAgB;AAErC,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,MAAI,MAAM,IAAI;AACd,MAAI,IAAI;AACR,MAAI,UAAU,CAAC;AAEf,SAAO,IAAI,KAAK;AACd,QAAI,QAAQ,OAAO,QAAQ,IAAI,OAAO,GAAG,CAAC;AAC1C,QAAI,QAAQ,OAAO,QAAQ,IAAI,OAAO,GAAG,CAAC;AAC1C,QAAI,QAAQ,OAAO,QAAQ,IAAI,OAAO,GAAG,CAAC;AAC1C,QAAI,QAAQ,OAAO,QAAQ,IAAI,OAAO,GAAG,CAAC;AAE1C,QAAI,KAAM,SAAS,IAAM,SAAS;AAClC,YAAQ,KAAK,OAAO,aAAa,EAAE,CAAC;AAEpC,QAAI,SAAS,IAAI;AACf,UAAI,MAAO,QAAQ,OAAQ,IAAM,SAAS;AAC1C,cAAQ,KAAK,OAAO,aAAa,EAAE,CAAC;AAAA,IACtC;AACA,QAAI,SAAS,IAAI;AACf,UAAI,MAAO,QAAQ,MAAQ,IAAK;AAChC,cAAQ,KAAK,OAAO,aAAa,EAAE,CAAC;AAAA,IACtC;AAAA,EACF;AAEA,SAAO,mBAAmB,QAAQ,KAAK,EAAE,CAAC;AAC5C;AAEA,IAAO,iBAAQ;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;","names":["i"]}